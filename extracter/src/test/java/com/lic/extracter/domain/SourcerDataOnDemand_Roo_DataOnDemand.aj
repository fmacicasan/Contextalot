// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lic.extracter.domain;

import com.lic.extracter.domain.Sourcer;
import com.lic.extracter.service.SourcerService;
import java.lang.Boolean;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SourcerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SourcerDataOnDemand: @Component;
    
    private Random SourcerDataOnDemand.rnd = new SecureRandom();
    
    private List<Sourcer> SourcerDataOnDemand.data;
    
    @Autowired
    SourcerService SourcerDataOnDemand.sourcerService;
    
    public Sourcer SourcerDataOnDemand.getNewTransientSourcer(int index) {
        Sourcer obj = new Sourcer();
        setProcessed(obj, index);
        setUrlSource(obj, index);
        return obj;
    }
    
    public void SourcerDataOnDemand.setProcessed(Sourcer obj, int index) {
        Boolean processed = Boolean.TRUE;
        obj.setProcessed(processed);
    }
    
    public void SourcerDataOnDemand.setUrlSource(Sourcer obj, int index) {
        String urlSource = "urlSource_" + index;
        obj.setUrlSource(urlSource);
    }
    
    public Sourcer SourcerDataOnDemand.getSpecificSourcer(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Sourcer obj = data.get(index);
        java.math.BigInteger id = obj.getId();
        return sourcerService.findSourcer(id);
    }
    
    public Sourcer SourcerDataOnDemand.getRandomSourcer() {
        init();
        Sourcer obj = data.get(rnd.nextInt(data.size()));
        java.math.BigInteger id = obj.getId();
        return sourcerService.findSourcer(id);
    }
    
    public boolean SourcerDataOnDemand.modifySourcer(Sourcer obj) {
        return false;
    }
    
    public void SourcerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = sourcerService.findSourcerEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Sourcer' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.lic.extracter.domain.Sourcer>();
        for (int i = 0; i < 10; i++) {
            Sourcer obj = getNewTransientSourcer(i);
            try {
                sourcerService.saveSourcer(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
