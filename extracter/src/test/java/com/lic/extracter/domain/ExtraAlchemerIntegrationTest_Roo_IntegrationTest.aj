// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lic.extracter.domain;

import com.lic.extracter.domain.ExtraAlchemerDataOnDemand;
import com.lic.extracter.service.ExtraAlchemerService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect ExtraAlchemerIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ExtraAlchemerIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ExtraAlchemerIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private ExtraAlchemerDataOnDemand ExtraAlchemerIntegrationTest.dod;
    
    @Autowired
    ExtraAlchemerService ExtraAlchemerIntegrationTest.extraAlchemerService;
    
    @Test
    public void ExtraAlchemerIntegrationTest.testCountAllExtraAlchemers() {
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to initialize correctly", dod.getRandomExtraAlchemer());
        long count = extraAlchemerService.countAllExtraAlchemers();
        Assert.assertTrue("Counter for 'ExtraAlchemer' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ExtraAlchemerIntegrationTest.testFindExtraAlchemer() {
        ExtraAlchemer obj = dod.getRandomExtraAlchemer();
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to provide an identifier", id);
        obj = extraAlchemerService.findExtraAlchemer(id);
        Assert.assertNotNull("Find method for 'ExtraAlchemer' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'ExtraAlchemer' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ExtraAlchemerIntegrationTest.testFindAllExtraAlchemers() {
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to initialize correctly", dod.getRandomExtraAlchemer());
        long count = extraAlchemerService.countAllExtraAlchemers();
        Assert.assertTrue("Too expensive to perform a find all test for 'ExtraAlchemer', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<ExtraAlchemer> result = extraAlchemerService.findAllExtraAlchemers();
        Assert.assertNotNull("Find all method for 'ExtraAlchemer' illegally returned null", result);
        Assert.assertTrue("Find all method for 'ExtraAlchemer' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ExtraAlchemerIntegrationTest.testFindExtraAlchemerEntries() {
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to initialize correctly", dod.getRandomExtraAlchemer());
        long count = extraAlchemerService.countAllExtraAlchemers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<ExtraAlchemer> result = extraAlchemerService.findExtraAlchemerEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'ExtraAlchemer' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'ExtraAlchemer' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ExtraAlchemerIntegrationTest.testSaveExtraAlchemer() {
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to initialize correctly", dod.getRandomExtraAlchemer());
        ExtraAlchemer obj = dod.getNewTransientExtraAlchemer(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'ExtraAlchemer' identifier to be null", obj.getId());
        extraAlchemerService.saveExtraAlchemer(obj);
        Assert.assertNotNull("Expected 'ExtraAlchemer' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ExtraAlchemerIntegrationTest.testDeleteExtraAlchemer() {
        ExtraAlchemer obj = dod.getRandomExtraAlchemer();
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ExtraAlchemer' failed to provide an identifier", id);
        obj = extraAlchemerService.findExtraAlchemer(id);
        extraAlchemerService.deleteExtraAlchemer(obj);
        Assert.assertNull("Failed to remove 'ExtraAlchemer' with identifier '" + id + "'", extraAlchemerService.findExtraAlchemer(id));
    }
    
}
