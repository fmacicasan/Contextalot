// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lic.extracter.domain;

import com.lic.extracter.domain.SourcerDataOnDemand;
import com.lic.extracter.service.SourcerService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect SourcerIntegrationTest_Roo_IntegrationTest {
    
    declare @type: SourcerIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: SourcerIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private SourcerDataOnDemand SourcerIntegrationTest.dod;
    
    @Autowired
    SourcerService SourcerIntegrationTest.sourcerService;
    
    @Test
    public void SourcerIntegrationTest.testCountAllSourcers() {
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to initialize correctly", dod.getRandomSourcer());
        long count = sourcerService.countAllSourcers();
        Assert.assertTrue("Counter for 'Sourcer' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void SourcerIntegrationTest.testFindSourcer() {
        Sourcer obj = dod.getRandomSourcer();
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to provide an identifier", id);
        obj = sourcerService.findSourcer(id);
        Assert.assertNotNull("Find method for 'Sourcer' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Sourcer' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void SourcerIntegrationTest.testFindAllSourcers() {
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to initialize correctly", dod.getRandomSourcer());
        long count = sourcerService.countAllSourcers();
        Assert.assertTrue("Too expensive to perform a find all test for 'Sourcer', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Sourcer> result = sourcerService.findAllSourcers();
        Assert.assertNotNull("Find all method for 'Sourcer' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Sourcer' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void SourcerIntegrationTest.testFindSourcerEntries() {
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to initialize correctly", dod.getRandomSourcer());
        long count = sourcerService.countAllSourcers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Sourcer> result = sourcerService.findSourcerEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Sourcer' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Sourcer' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void SourcerIntegrationTest.testSaveSourcer() {
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to initialize correctly", dod.getRandomSourcer());
        Sourcer obj = dod.getNewTransientSourcer(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Sourcer' identifier to be null", obj.getId());
        sourcerService.saveSourcer(obj);
        Assert.assertNotNull("Expected 'Sourcer' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void SourcerIntegrationTest.testDeleteSourcer() {
        Sourcer obj = dod.getRandomSourcer();
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Sourcer' failed to provide an identifier", id);
        obj = sourcerService.findSourcer(id);
        sourcerService.deleteSourcer(obj);
        Assert.assertNull("Failed to remove 'Sourcer' with identifier '" + id + "'", sourcerService.findSourcer(id));
    }
    
}
