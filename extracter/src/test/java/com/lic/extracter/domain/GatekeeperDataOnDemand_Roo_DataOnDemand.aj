// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lic.extracter.domain;

import com.lic.extracter.domain.Gatekeeper;
import com.lic.extracter.service.GatekeeperService;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GatekeeperDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GatekeeperDataOnDemand: @Component;
    
    private Random GatekeeperDataOnDemand.rnd = new SecureRandom();
    
    private List<Gatekeeper> GatekeeperDataOnDemand.data;
    
    @Autowired
    GatekeeperService GatekeeperDataOnDemand.gatekeeperService;
    
    public Gatekeeper GatekeeperDataOnDemand.getNewTransientGatekeeper(int index) {
        Gatekeeper obj = new Gatekeeper();
        setActive(obj, index);
        setCount(obj, index);
        setDate(obj, index);
        return obj;
    }
    
    public void GatekeeperDataOnDemand.setActive(Gatekeeper obj, int index) {
        Boolean active = Boolean.TRUE;
        obj.setActive(active);
    }
    
    public void GatekeeperDataOnDemand.setCount(Gatekeeper obj, int index) {
        Integer count = new Integer(index);
        obj.setCount(count);
    }
    
    public void GatekeeperDataOnDemand.setDate(Gatekeeper obj, int index) {
        String date = "date_" + index;
        obj.setDate(date);
    }
    
    public Gatekeeper GatekeeperDataOnDemand.getSpecificGatekeeper(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Gatekeeper obj = data.get(index);
        java.math.BigInteger id = obj.getId();
        return gatekeeperService.findGatekeeper(id);
    }
    
    public Gatekeeper GatekeeperDataOnDemand.getRandomGatekeeper() {
        init();
        Gatekeeper obj = data.get(rnd.nextInt(data.size()));
        java.math.BigInteger id = obj.getId();
        return gatekeeperService.findGatekeeper(id);
    }
    
    public boolean GatekeeperDataOnDemand.modifyGatekeeper(Gatekeeper obj) {
        return false;
    }
    
    public void GatekeeperDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = gatekeeperService.findGatekeeperEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Gatekeeper' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.lic.extracter.domain.Gatekeeper>();
        for (int i = 0; i < 10; i++) {
            Gatekeeper obj = getNewTransientGatekeeper(i);
            try {
                gatekeeperService.saveGatekeeper(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
