// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lic.extracter.domain;

import com.lic.extracter.domain.AlchemerDataOnDemand;
import com.lic.extracter.service.AlchemerService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect AlchemerIntegrationTest_Roo_IntegrationTest {
    
    declare @type: AlchemerIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: AlchemerIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private AlchemerDataOnDemand AlchemerIntegrationTest.dod;
    
    @Autowired
    AlchemerService AlchemerIntegrationTest.alchemerService;
    
    @Test
    public void AlchemerIntegrationTest.testCountAllAlchemers() {
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to initialize correctly", dod.getRandomAlchemer());
        long count = alchemerService.countAllAlchemers();
        Assert.assertTrue("Counter for 'Alchemer' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void AlchemerIntegrationTest.testFindAlchemer() {
        Alchemer obj = dod.getRandomAlchemer();
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to provide an identifier", id);
        obj = alchemerService.findAlchemer(id);
        Assert.assertNotNull("Find method for 'Alchemer' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Alchemer' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void AlchemerIntegrationTest.testFindAllAlchemers() {
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to initialize correctly", dod.getRandomAlchemer());
        long count = alchemerService.countAllAlchemers();
        Assert.assertTrue("Too expensive to perform a find all test for 'Alchemer', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Alchemer> result = alchemerService.findAllAlchemers();
        Assert.assertNotNull("Find all method for 'Alchemer' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Alchemer' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void AlchemerIntegrationTest.testFindAlchemerEntries() {
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to initialize correctly", dod.getRandomAlchemer());
        long count = alchemerService.countAllAlchemers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Alchemer> result = alchemerService.findAlchemerEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Alchemer' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Alchemer' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void AlchemerIntegrationTest.testSaveAlchemer() {
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to initialize correctly", dod.getRandomAlchemer());
        Alchemer obj = dod.getNewTransientAlchemer(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Alchemer' identifier to be null", obj.getId());
        alchemerService.saveAlchemer(obj);
        Assert.assertNotNull("Expected 'Alchemer' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void AlchemerIntegrationTest.testDeleteAlchemer() {
        Alchemer obj = dod.getRandomAlchemer();
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Alchemer' failed to provide an identifier", id);
        obj = alchemerService.findAlchemer(id);
        alchemerService.deleteAlchemer(obj);
        Assert.assertNull("Failed to remove 'Alchemer' with identifier '" + id + "'", alchemerService.findAlchemer(id));
    }
    
}
