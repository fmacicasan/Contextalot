// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lic.extracter.domain;

import com.lic.extracter.domain.Alchemer;
import com.lic.extracter.service.AlchemerService;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AlchemerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AlchemerDataOnDemand: @Component;
    
    private Random AlchemerDataOnDemand.rnd = new SecureRandom();
    
    private List<Alchemer> AlchemerDataOnDemand.data;
    
    @Autowired
    AlchemerService AlchemerDataOnDemand.alchemerService;
    
    public Alchemer AlchemerDataOnDemand.getNewTransientAlchemer(int index) {
        Alchemer obj = new Alchemer();
        setInquiryDate(obj, index);
        setKeywords(obj, index);
        setUrl(obj, index);
        setUrlContent(obj, index);
        return obj;
    }
    
    public void AlchemerDataOnDemand.setInquiryDate(Alchemer obj, int index) {
        String inquiryDate = "inquiryDate_" + index;
        obj.setInquiryDate(inquiryDate);
    }
    
    public void AlchemerDataOnDemand.setKeywords(Alchemer obj, int index) {
        String keywords = "keywords_" + index;
        obj.setKeywords(keywords);
    }
    
    public void AlchemerDataOnDemand.setUrl(Alchemer obj, int index) {
        String url = "url_" + index;
        obj.setUrl(url);
    }
    
    public void AlchemerDataOnDemand.setUrlContent(Alchemer obj, int index) {
        String urlContent = "urlContent_" + index;
        obj.setUrlContent(urlContent);
    }
    
    public Alchemer AlchemerDataOnDemand.getSpecificAlchemer(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Alchemer obj = data.get(index);
        java.math.BigInteger id = obj.getId();
        return alchemerService.findAlchemer(id);
    }
    
    public Alchemer AlchemerDataOnDemand.getRandomAlchemer() {
        init();
        Alchemer obj = data.get(rnd.nextInt(data.size()));
        java.math.BigInteger id = obj.getId();
        return alchemerService.findAlchemer(id);
    }
    
    public boolean AlchemerDataOnDemand.modifyAlchemer(Alchemer obj) {
        return false;
    }
    
    public void AlchemerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = alchemerService.findAlchemerEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Alchemer' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.lic.extracter.domain.Alchemer>();
        for (int i = 0; i < 10; i++) {
            Alchemer obj = getNewTransientAlchemer(i);
            try {
                alchemerService.saveAlchemer(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
